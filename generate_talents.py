#!/usr/bin/env python3
"""
HumaniQ AI - Gerador de Banco de Talentos
Gera candidatos externos para sistema de recrutamento e an√°lise de fit
"""

import json
import random
from faker import Faker
import os
from datetime import datetime, timedelta

# Inicializa o Faker
fake = Faker()

# --- DADOS DE CONFIGURA√á√ÉO ---
PAISES = {
    "USA": "en_US", "Netherlands": "nl_NL", "India": "en_IN", "China": "zh_CN",
    "Japan": "ja_JP", "Nigeria": "en_US", "Russia": "ru_RU", "South Korea": "ko_KR",
    "Portugal": "pt_PT", "Germany": "de_DE", "Brazil": "pt_BR", "France": "fr_FR",
    "Spain": "es_ES", "Italy": "it_IT", "Mexico": "es_MX", "Argentina": "es_AR"
}
LISTA_PAISES = list(PAISES.keys())

CARGOS = [
    "Analista de Dados", "Engenheiro de Software", "Gerente de Produto",
    "Designer UX/UI", "Cientista de Dados", "Gerente de Marketing",
    "Analista de RH", "DevOps Engineer", "Product Owner", "Data Engineer",
    "Business Analyst", "QA Engineer", "Frontend Developer", "Backend Developer",
    "Full Stack Developer", "Arquiteto de Software", "Gerente de Vendas",
    "Customer Success Manager", "Content Manager", "Social Media Manager"
]

AREAS_INTERESSE = [
    "Tecnologia", "Produto", "Marketing", "Recursos Humanos", "Design",
    "Vendas", "Customer Success", "Finan√ßas", "Opera√ß√µes", "Estrat√©gia"
]

COMPETENCIAS = [
    "Python", "SQL", "Power BI", "Comunica√ß√£o", "Lideran√ßa", "Gest√£o de Projetos",
    "Java", "React", "Machine Learning", "An√°lise Estat√≠stica", "Figma", "Scrum",
    "JavaScript", "Node.js", "AWS", "Docker", "Kubernetes", "Git", "MongoDB",
    "PostgreSQL", "Tableau", "Excel Avan√ßado", "Apresenta√ß√£o", "Negocia√ß√£o",
    "Agile", "Kanban", "Design Thinking", "UX Research", "Photoshop", "Adobe XD",
    "Google Analytics", "SEO", "SEM", "Facebook Ads", "Instagram Marketing",
    "LinkedIn Sales", "CRM", "Salesforce", "HubSpot", "Slack", "Jira", "Confluence"
]

SITUACAO_ATUAL = [
    "Empregado - Procurando oportunidades",
    "Empregado - Aberto a propostas",
    "Desempregado - Procurando ativamente",
    "Freelancer - Buscando CLT",
    "Estudante - Primeiro emprego",
    "Estudante - Est√°gio",
    "Empregado - Insatisfeito",
    "Empregado - Crescimento de carreira"
]

MOTIVACOES_MUDANCA = [
    "Crescimento profissional",
    "Melhor remunera√ß√£o",
    "Desafios t√©cnicos",
    "Cultura empresarial",
    "Work-life balance",
    "Aprendizado e desenvolvimento",
    "Lideran√ßa e gest√£o",
    "Inova√ß√£o e tecnologia",
    "Prop√≥sito e impacto social",
    "Flexibilidade e remoto"
]

NIVEL_EXPERIENCIA = [
    "J√∫nior (0-2 anos)",
    "Pleno (2-5 anos)",
    "S√™nior (5-8 anos)",
    "Especialista (8-12 anos)",
    "L√≠der (12+ anos)"
]

EMPRESAS_EXEMPLO = [
    "Google", "Microsoft", "Amazon", "Meta", "Apple", "Netflix", "Spotify",
    "Uber", "Airbnb", "Tesla", "SpaceX", "Slack", "Zoom", "Salesforce",
    "Adobe", "Oracle", "IBM", "Intel", "NVIDIA", "Startup inovadora",
    "Consultoria internacional", "Banco digital", "Fintech", "Healthtech",
    "Edtech", "E-commerce", "Multinacional", "Scale-up"
]

# --- FUN√á√ÉO DE GERA√á√ÉO ---


def criar_talento(id_talento):
    """Cria um perfil de talento/candidato externo"""

    pais = random.choice(LISTA_PAISES)
    locale = PAISES[pais]
    fake_local = Faker(locale)

    genero = random.choice(["Masculino", "Feminino", "N√£o-bin√°rio"])
    nome = fake_local.name_male() if genero == "Masculino" else fake_local.name_female()

    # N√≠vel de experi√™ncia afeta sal√°rio e compet√™ncias
    nivel_exp = random.choice(NIVEL_EXPERIENCIA)
    anos_experiencia = {
        "J√∫nior (0-2 anos)": random.randint(0, 2),
        "Pleno (2-5 anos)": random.randint(2, 5),
        "S√™nior (5-8 anos)": random.randint(5, 8),
        "Especialista (8-12 anos)": random.randint(8, 12),
        "L√≠der (12+ anos)": random.randint(12, 20)
    }[nivel_exp]

    # Pretens√£o salarial baseada no n√≠vel
    salario_base = {
        "J√∫nior (0-2 anos)": random.randint(3000, 6000),
        "Pleno (2-5 anos)": random.randint(6000, 12000),
        "S√™nior (5-8 anos)": random.randint(12000, 20000),
        "Especialista (8-12 anos)": random.randint(20000, 30000),
        "L√≠der (12+ anos)": random.randint(30000, 50000)
    }[nivel_exp]

    # N√∫mero de compet√™ncias baseado na experi√™ncia
    num_competencias = min(len(COMPETENCIAS), max(
        3, anos_experiencia // 2 + random.randint(2, 4)))

    talento = {
        "id_talento": f"TL{str(id_talento).zfill(3)}",
        "nome": nome,
        "cargo_atual": random.choice(CARGOS),
        "cargo_interesse": random.choice(CARGOS),
        "area_interesse": random.choice(AREAS_INTERESSE),
        "nivel_experiencia": nivel_exp,
        "anos_experiencia": anos_experiencia,

        "demografia": {
            "pais_origem": pais,
            "genero": genero,
            "idade": random.randint(22, 55),
            "cidade": fake_local.city(),
            "disponibilidade_mudanca": random.choice([True, False]),
            # 75% aceita remoto
            "aceita_remoto": random.choice([True, True, True, False])
        },

        "perfil_big_five": {
            "abertura_a_experiencia": round(random.uniform(1, 10), 1),
            "conscienciosidade": round(random.uniform(1, 10), 1),
            "extroversao": round(random.uniform(1, 10), 1),
            "amabilidade": round(random.uniform(1, 10), 1),
            "neuroticismo": round(random.uniform(1, 10), 1)
        },

        "competencias": random.sample(COMPETENCIAS, k=num_competencias),

        "experiencia_profissional": {
            "empresa_atual": random.choice(EMPRESAS_EXEMPLO),
            "tempo_empresa_atual_meses": random.randint(6, 48),
            "empresas_anteriores": random.randint(1, 5),
            "setores_experiencia": random.sample(AREAS_INTERESSE, k=random.randint(1, 3))
        },

        "situacao_profissional": {
            "status": random.choice(SITUACAO_ATUAL),
            "disponibilidade_inicio": random.choice([
                "Imediata", "15 dias", "30 dias", "45 dias", "60 dias", "90 dias"
            ]),
            "motivo_mudanca": random.choice(MOTIVACOES_MUDANCA),
            # 66% flex√≠vel
            "flexibilidade_horario": random.choice([True, True, False]),
        },

        "expectativas_financeiras": {
            "pretensao_salarial_bruto": salario_base + random.randint(-1000, 2000),
            "negociavel": random.choice([True, True, False]),  # 66% negoci√°vel
            "beneficios_prioritarios": random.sample([
                "Vale refei√ß√£o", "Plano de sa√∫de", "Plano dental", "Vale transporte",
                "Home office", "Flexibilidade hor√°rio", "Seguro de vida",
                "Previd√™ncia privada", "Aux√≠lio educa√ß√£o", "Gympass", "Day off"
            ], k=random.randint(3, 6))
        },

        "fit_cultural": {
            "valores_importantes": random.sample([
                "Inova√ß√£o", "Colabora√ß√£o", "Transpar√™ncia", "Diversidade",
                "Sustentabilidade", "Crescimento", "Qualidade", "Agilidade",
                "Autonomia", "Prop√≥sito", "Excel√™ncia", "Respeito"
            ], k=random.randint(3, 5)),
            "estilo_trabalho_preferido": random.choice([
                "Colaborativo", "Independente", "H√≠brido", "Estruturado", "Flex√≠vel"
            ]),
            "tamanho_empresa_preferido": random.choice([
                "Startup (< 50)", "Pequena (50-200)", "M√©dia (200-1000)",
                "Grande (1000+)", "Sem prefer√™ncia"
            ])
        },

        "soft_skills": {
            "comunicacao": round(random.uniform(6, 10), 1),
            "trabalho_em_equipe": round(random.uniform(6, 10), 1),
            "adaptabilidade": round(random.uniform(5, 10), 1),
            "resolucao_problemas": round(random.uniform(6, 10), 1),
            "lideranca": round(random.uniform(4, 10), 1),
            "criatividade": round(random.uniform(5, 10), 1)
        },

        "formacao": {
            "nivel_educacao": random.choice([
                "Ensino M√©dio", "Tecn√≥logo", "Gradua√ß√£o", "P√≥s-gradua√ß√£o",
                "MBA", "Mestrado", "Doutorado"
            ]),
            "area_formacao": random.choice([
                "Ci√™ncia da Computa√ß√£o", "Engenharia", "Administra√ß√£o", "Marketing",
                "Design", "Psicologia", "Economia", "Estat√≠stica", "Matem√°tica",
                "Comunica√ß√£o", "Engenharia de Produ√ß√£o"
            ]),
            "certificacoes": random.sample([
                "PMP", "Scrum Master", "AWS Certified", "Google Analytics",
                "Salesforce Admin", "Azure Fundamentals", "Power BI", "Tableau",
                "ITIL", "Six Sigma", "Design Thinking", "Agile Coach"
            ], k=random.randint(0, 3))
        },

        "conhecimento_empresa": {
            "ja_aplicou_antes": random.choice([True, False]),
            # 33% conhece
            "conhece_alguem_empresa": random.choice([True, False, False]),
            "interesse_especifico": random.choice([
                "Cultura inovadora", "Crescimento r√°pido", "Tecnologia de ponta",
                "Impacto social", "Marca reconhecida", "Oportunidade aprendizado",
                "Lideran√ßa de mercado", "Ambiente colaborativo"
            ]),
            "como_conheceu_vaga": random.choice([
                "LinkedIn", "Site da empresa", "Indica√ß√£o", "Head hunter",
                "Portal de empregos", "Redes sociais", "Evento", "Newsletter"
            ])
        },

        "score_engagement": round(random.uniform(6, 10), 1),
        "score_potencial": round(random.uniform(5, 10), 1),
        "ultima_atualizacao": datetime.now().isoformat()
    }

    return talento


def gerar_talentos(num_talentos=100):
    """Gera e salva talentos em arquivos JSON"""

    # Criar diret√≥rio se n√£o existir
    os.makedirs("data/talentos", exist_ok=True)

    print(f"üéØ Gerando {num_talentos} talentos...")

    for i in range(1, num_talentos + 1):
        talento = criar_talento(i)

        # Salvar em arquivo JSON
        filename = f"data/talentos/talento_{str(i).zfill(3)}.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(talento, f, ensure_ascii=False, indent=2)

        if i % 10 == 0:
            print(f"‚úÖ {i} talentos gerados...")

    print(f"üéâ {num_talentos} talentos gerados com sucesso!")
    print(f"üìÅ Arquivos salvos em: data/talentos/")

    # Gerar relat√≥rio
    gerar_relatorio_talentos()


def gerar_relatorio_talentos():
    """Gera relat√≥rio dos talentos criados"""

    print("\n" + "="*60)
    print("üìä RELAT√ìRIO DO BANCO DE TALENTOS")
    print("="*60)

    talentos_files = [f for f in os.listdir(
        "data/talentos") if f.endswith('.json')]
    total_talentos = len(talentos_files)

    print(f"üìà Total de talentos: {total_talentos}")

    # Analisar alguns padr√µes
    if total_talentos > 0:
        # Ler alguns arquivos para estat√≠sticas
        sample_files = talentos_files[:min(10, total_talentos)]
        cargos = []
        paises = []
        experiencias = []

        for filename in sample_files:
            with open(f"data/talentos/{filename}", 'r', encoding='utf-8') as f:
                talento = json.load(f)
                cargos.append(talento['cargo_interesse'])
                paises.append(talento['demografia']['pais_origem'])
                experiencias.append(talento['nivel_experiencia'])

        print(f"üéØ Cargos de interesse (amostra): {set(cargos)}")
        print(f"üåç Pa√≠ses representados (amostra): {set(paises)}")
        print(f"üìä N√≠veis de experi√™ncia (amostra): {set(experiencias)}")

    print("\nüí° Pr√≥ximos passos:")
    print("1. Execute o sistema de An√°lise de Fit")
    print("2. Compare talentos externos vs funcion√°rios internos")
    print("3. Use filtros avan√ßados por compet√™ncias e cultura")
    print("="*60)


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(
        description='Gera banco de talentos para HumaniQ AI')
    parser.add_argument('--num', type=int, default=100,
                        help='N√∫mero de talentos a gerar (padr√£o: 100)')

    args = parser.parse_args()

    print("üß† HumaniQ AI - Gerador de Banco de Talentos")
    print("=" * 50)

    gerar_talentos(args.num)
